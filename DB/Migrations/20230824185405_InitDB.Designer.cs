// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230824185405_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DB.Models.Cargo", b =>
                {
                    b.Property<Guid>("CargoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_cargo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("CargoID");

                    b.ToTable("cargos");
                });

            modelBuilder.Entity("DB.Models.Ciudad", b =>
                {
                    b.Property<Guid>("CiudadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_ciudad");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("CiudadID");

                    b.ToTable("ciudades");
                });

            modelBuilder.Entity("DB.Models.Credencial", b =>
                {
                    b.Property<Guid>("CredencialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_credencial");

                    b.Property<int>("Activo")
                        .HasColumnType("integer")
                        .HasColumnName("activo");

                    b.Property<DateTime>("ActualidoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actualizado_en");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contrasenia");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usuario");

                    b.HasKey("CredencialID");

                    b.ToTable("credenciales");
                });

            modelBuilder.Entity("DB.Models.Empleado", b =>
                {
                    b.Property<Guid>("EmpeleadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_empleado");

                    b.Property<int>("Activo")
                        .HasColumnType("integer")
                        .HasColumnName("activo");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<Guid>("CargoID")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cargo");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dni");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_alta");

                    b.Property<Guid>("JefeID")
                        .HasColumnType("uuid")
                        .HasColumnName("id_jefe");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<Guid>("SucursalID")
                        .HasColumnType("uuid")
                        .HasColumnName("id_sucursal");

                    b.HasKey("EmpeleadoID");

                    b.HasIndex("CargoID");

                    b.HasIndex("SucursalID");

                    b.ToTable("empleados");
                });

            modelBuilder.Entity("DB.Models.Sucursal", b =>
                {
                    b.Property<Guid>("SucursalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_sucursal");

                    b.Property<Guid>("CiudadID")
                        .HasColumnType("uuid")
                        .HasColumnName("id_ciudad");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("SucursalID");

                    b.HasIndex("CiudadID");

                    b.ToTable("sucursales");
                });

            modelBuilder.Entity("DB.Models.Empleado", b =>
                {
                    b.HasOne("DB.Models.Cargo", "Cargo")
                        .WithMany("Empleados")
                        .HasForeignKey("CargoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Sucursal", "Sucursal")
                        .WithMany("Empleados")
                        .HasForeignKey("SucursalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("DB.Models.Sucursal", b =>
                {
                    b.HasOne("DB.Models.Ciudad", "Ciudad")
                        .WithMany("Sucursales")
                        .HasForeignKey("CiudadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("DB.Models.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("DB.Models.Ciudad", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("DB.Models.Sucursal", b =>
                {
                    b.Navigation("Empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
